package edu.ithaca.dragon.par.domainModel;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import edu.ithaca.dragon.par.io.JsonDatastore;
import edu.ithaca.dragon.util.JsonUtil;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class QuestionTest {

    public static boolean checkIfListsHaveSameQuestionObjects(List<Question> list1, List<Question> list2){
        if(list1.size() != list2.size()){

        }
        return true;
    }

    @Test
    public void checkIfListsHaveSameQuestionObjectsTest() throws IOException{
        QuestionPool qp = new QuestionPool(new JsonDatastore("src/test/resources/author/SampleQuestions.json"));

        //The Lists are exactly the same
        List<Question> list1a = qp.allQuestions;
        List<Question> list1b = qp.allQuestions;
        assertEquals(true, checkIfListsHaveSameQuestionObjects(list1a,list1b));

        //the Lists are different size
        List<Question> list1c = qp.allQuestions;
        list1c.add(new Question());
        assertEquals(false, checkIfListsHaveSameQuestionObjects(list1a,list1c));

        //The content of the Questions are the same, but they are different objects
        QuestionPool qp2 = new QuestionPool(new JsonDatastore("src/test/resources/author/SampleQuestions.json"));
        List<Question> list1d = qp2.allQuestions;
        assertEquals(false, checkIfListsHaveSameQuestionObjects(list1a, list1d));
    }

    @Test
    public void toJsonAndBackTest() throws IOException {
        Question planeQ = new Question("PlaneQ1", "On which plane is the ultrasound taken?", 1,
                "Lateral", Arrays.asList("Transverse", "Lateral", "I don't know"), "../static/images/equine02.jpg");
        Question structureQ = new Question("StructureQ1", "What structure is in the near field?", 2,
                "bone", Arrays.asList("bone", "ligament", "tumor", "tendon", "I don't know"), "../static/images/equine02.jpg");
        Question zoneQ = new Question("ZoneQ1", "In what zone is this ultrasound taken?", 4,
                "3c", Arrays.asList("1a", "1b", "2a", "2b", "2c", "3a", "3b", "3c"), "../static/images/equine02.jpg");
        List<Question> questionsToFile = Arrays.asList(planeQ, structureQ, zoneQ);

        JsonUtil.toJsonFile("src/test/resources/autoGenerated/QuestionTest-toJsonAndBackTest.json", questionsToFile);
        List<Question> questionsFromFile = JsonUtil.listFromJsonFile("src/test/resources/autoGenerated/QuestionTest-toJsonAndBackTest.json", Question.class);

        assertEquals(questionsToFile.size(), questionsFromFile.size());
        for (int i=0; i< questionsFromFile.size(); i++){
            assertEquals(questionsToFile.get(i), questionsFromFile.get(i));
        }
        Path path = Paths.get("src/test/resources/autoGenerated/QuestionTest-toJsonAndBackTest.json");
        assertTrue(Files.deleteIfExists(path));
    }

    @Test
    public void equalsTest(){
        Question planeQ = new Question("PlaneQ1", "On which plane is the ultrasound taken?", 1,
                "Lateral", Arrays.asList("Transverse", "Lateral", "I don't know"), "../static/images/equine02.jpg");
        assertEquals(planeQ, planeQ);
        assertNotEquals(planeQ, "Hello");

        Question planeQsame = new Question("PlaneQ1", "On which plane is the ultrasound taken?", 1,
                "Lateral", Arrays.asList("Transverse", "Lateral", "I don't know"), "../static/images/equine02.jpg");
        assertEquals(planeQ, planeQsame);

        Question planeQdiffAns = new Question("PlaneQ1", "On which plane is the ultrasound taken?", 1,
                "Lateral", Arrays.asList("Transverse", "Lateral", "I don't know too much"), "../static/images/equine02.jpg");
        assertNotEquals(planeQ, planeQdiffAns);
    }
}
