package edu.ithaca.dragon.par.studentModel;

import edu.ithaca.dragon.par.domainModel.QuestionPool;
import edu.ithaca.dragon.par.domainModel.equineUltrasound.EquineQuestionTypes;
import edu.ithaca.dragon.par.io.JsonQuestionPoolDatastore;
import edu.ithaca.dragon.par.io.StudentReport;
import edu.ithaca.dragon.util.JsonUtil;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.*;

class StudentReportCreatorTest {

    @Test
    public void toAndFromJsonTest() throws IOException {
        List<ResponsesPerQuestion> responsesPerQuestions= JsonUtil.listFromJsonFile("src/test/resources/author/SampleResponsePerQuestionSet.json",ResponsesPerQuestion.class);
        UserResponseSet userResponseSet=new UserResponseSet(responsesPerQuestions.get(0).getUserId());
        for(ResponsesPerQuestion responsesPerQuestion:responsesPerQuestions){
            userResponseSet.addResponse(responsesPerQuestion);
        }
        QuestionPool questionPool = new QuestionPool(new JsonQuestionPoolDatastore("src/test/resources/author/SampleQuestionPoolWithAttachment.json").getAllQuestions());
        StudentModel studentModel1 = new StudentModel("TestUser-A", questionPool.getAllQuestions());
        StudentModel studentModel2 = new StudentModel("TestUser-B", questionPool.getAllQuestions());
        StudentModel studentModel3 = new StudentModel("TestUser-C", questionPool.getAllQuestions());
        StudentModel studentModel4 = new StudentModel("TestUser-D", questionPool.getAllQuestions());
        StudentModel studentModel5 = new StudentModel("TestUser-E", questionPool.getAllQuestions());
        List<StudentModel> allStudentModels=new ArrayList<>();
        allStudentModels.addAll(Arrays.asList(studentModel1,studentModel2,studentModel3,studentModel4,studentModel5));

        for(int i=0;i<allStudentModels.size();i++){
            allStudentModels.get(i).getUserResponseSet().setResponsesPerQuestionList(userResponseSet.getResponsesPerQuestionList());
        }
        List<StudentReport> studentReports=new ArrayList<>();
        for(StudentModel studentModel:allStudentModels){
            studentReports.add(StudentReportCreator.buildStudentReport(studentModel.getUserResponseSet(), studentModel.questionCountsByTypeMap(), 2));
        }
        //writes to Json
        JsonUtil.toJsonFile("src/test/resources/autoGenerated/SampleStudentReports.json", studentReports);
        //reads back in Json
        List<StudentReport> studentReportList = JsonUtil.listFromJsonFile("src/test/resources/autoGenerated/SampleStudentReports.json", StudentReport.class);

        assertEquals(5, studentReportList.size());
        Path path = Paths.get("src/test/resources/autoGenerated/SampleStudentReports.json");
        assertTrue(Files.deleteIfExists(path));
    }

    @Test
    public void allResponsesPerTypeTest() throws IOException{
        List<ResponsesPerQuestion> responsesPerQuestions=JsonUtil.listFromJsonFile("src/test/resources/author/SampleResponsePerQuestionSet.json",ResponsesPerQuestion.class);
        UserResponseSet userResponseSet=new UserResponseSet(responsesPerQuestions.get(0).getUserId());

        for(ResponsesPerQuestion responsesPerQuestion:responsesPerQuestions){
            userResponseSet.addResponse(responsesPerQuestion);
        }

        Map<String, List<ResponsesPerQuestion>> responseByType = UserResponseSet.splitResponsesByType(userResponseSet.getResponsesPerQuestionList());
        Map<String,Integer> responsesPerType=StudentReportCreator.allResponsesPerType(responseByType);

        assertEquals(5,responsesPerType.get(EquineQuestionTypes.plane.toString()).intValue());
        assertEquals(6,responsesPerType.get(EquineQuestionTypes.structure.toString()).intValue());
        assertEquals(2,responsesPerType.get(EquineQuestionTypes.attachment.toString()).intValue());
        assertEquals(7,responsesPerType.get(EquineQuestionTypes.zone.toString()).intValue());

    }

    @Test
    public void numberOfQuestionsPerTypeTest()throws IOException{
        QuestionPool questionPool = new QuestionPool(new JsonQuestionPoolDatastore("src/test/resources/author/DemoQuestionPoolFewFollowups.json").getAllQuestions());
        StudentModel studentModel = new StudentModel("TestUser1", questionPool.getAllQuestions());
        Map<String, List<QuestionCount>> questionTypesListMap=studentModel.questionCountsByTypeMap();
        Map<String, Integer> numberOfQuestionsPerType=StudentReportCreator.numberOfQuestionsPerType(questionTypesListMap);

        assertEquals(13,numberOfQuestionsPerType.get(EquineQuestionTypes.plane.toString()).intValue());
        assertEquals(27,numberOfQuestionsPerType.get(EquineQuestionTypes.structure.toString()).intValue());
        assertEquals(7,numberOfQuestionsPerType.get(EquineQuestionTypes.attachment.toString()).intValue());
        assertEquals(10,numberOfQuestionsPerType.get(EquineQuestionTypes.zone.toString()).intValue());

    }

    @Test
    public void numberOfQuestionsAnsweredByTypeTest()throws IOException{
        List<ResponsesPerQuestion> responsesPerQuestions=JsonUtil.listFromJsonFile("src/test/resources/author/SampleResponsePerQuestionSet.json",ResponsesPerQuestion.class);
        UserResponseSet userResponseSet=new UserResponseSet(responsesPerQuestions.get(0).getUserId());

        for(ResponsesPerQuestion responsesPerQuestion:responsesPerQuestions){
            userResponseSet.addResponse(responsesPerQuestion);
        }

        Map<String, List<ResponsesPerQuestion>> responseByType = UserResponseSet.splitResponsesByType(userResponseSet.getResponsesPerQuestionList());
        Map<String,Integer> numberOfQuestionsAnsweredByType=StudentReportCreator.numOfQuestionsAnswered(responseByType);

        assertEquals(5,numberOfQuestionsAnsweredByType.get(EquineQuestionTypes.plane.toString()).intValue());
        assertEquals(5,numberOfQuestionsAnsweredByType.get(EquineQuestionTypes.structure.toString()).intValue());
        assertEquals(2,numberOfQuestionsAnsweredByType.get(EquineQuestionTypes.attachment.toString()).intValue());
        assertEquals(5,numberOfQuestionsAnsweredByType.get(EquineQuestionTypes.zone.toString()).intValue());


    }


}