package edu.ithaca.dragon.par.io;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import edu.ithaca.dragon.par.domainModel.Question;
import edu.ithaca.dragon.par.domainModel.QuestionPool;
import edu.ithaca.dragon.util.JsonUtil;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ImageTaskResponseImp1Test {

    @Test
    public void toAndBackJsonTest() throws IOException {
        ImageTaskResponseImp1 responseSet=new ImageTaskResponseImp1("response1",Arrays.asList("PlaneQ1","StructureQ1","ZoneQ1"),Arrays.asList("Lateral","bone","3c"));
        List<ImageTaskResponseImp1> responsesToFile = Arrays.asList(responseSet);

        JsonUtil.toJsonFile("src/test/resources/autoGenerated/ResponsesTest-toAndBackJsonTest.json", responsesToFile);
        List<ImageTaskResponseImp1> responsesFromFile = JsonUtil.listFromJsonFile("src/test/resources/autoGenerated/ResponsesTest-toAndBackJsonTest.json", ImageTaskResponseImp1.class);

        assertEquals(responsesToFile.size(),responsesFromFile.size());
        for (int i=0; i< responsesFromFile.size(); i++){
            assertEquals(responsesToFile.get(i), responsesFromFile.get(i));
        }
        Path path = Paths.get("src/test/resources/autoGenerated/ResponsesTest-toAndBackJsonTest.json");
        assertTrue(Files.deleteIfExists(path));
    }

    @Test
    public void findResponseToQuestionTest() throws IOException{
        QuestionPool qp = new QuestionPool(new JsonQuestionPoolDatastore("src/test/resources/author/QuestionPools/DemoQuestionPoolFollowup.json").getAllQuestions());
        ImageTaskResponseImp1 responseSet = new ImageTaskResponseImp1("response1",Arrays.asList("plane./images/demoEquine14.jpg","structure0./images/demoEquine14.jpg", "AttachQ1"),Arrays.asList("Lateral","bone","3c"));
        List<ImageTaskResponseImp1> responsesToFile = Arrays.asList(responseSet);
        //test for sucsessfully getting the answer to a parent question
        assertEquals("Lateral", responseSet.findResponseToQuestion(qp.getQuestionFromId("plane./images/demoEquine14.jpg")));
        assertEquals("bone", responseSet.findResponseToQuestion(qp.getQuestionFromId("structure0./images/demoEquine14.jpg")));
        assertEquals("3c", responseSet.findResponseToQuestion(qp.getQuestionFromId("AttachQ1")));

        //getting null for a question that doesn't exist
        assertEquals(null, responseSet.findResponseToQuestion(new Question("notAValidQuestion", "notAValidQuestion", "notAValidQuestion", "notAValidQuestion", Arrays.asList("notAValidQuestion","notAValidQuestion2"), "notAValidQuestion")));
    }
}
