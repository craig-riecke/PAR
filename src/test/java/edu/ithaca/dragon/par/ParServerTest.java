package edu.ithaca.dragon.par;


import edu.ithaca.dragon.par.io.*;
import edu.ithaca.dragon.par.studentModel.StudentModel;
import edu.ithaca.dragon.util.DataUtil;
import edu.ithaca.dragon.util.JsonUtil;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

//TODO: move to ParStudentAndAuthorServerTest
public class ParServerTest {

    @Test
    public void nextImageTaskTest() throws IOException{
        StudentModelDatastore studentModelDatastore = new JsonStudentModelDatastore("src/test/resources/author/SampleQuestionPool3.json", null);
        ParServer parServer = new ParServer(studentModelDatastore);
        ImageTask nextTask = parServer.nextImageTask("s1");
        ImageTask intendedFirstTask = JsonUtil.fromJsonFile("src/test/resources/author/nextImageTaskTest1.json", ImageTask.class);
        assertEquals(intendedFirstTask, nextTask);

        nextTask = parServer.nextImageTask("s2");
        assertEquals(intendedFirstTask, nextTask);

        nextTask = parServer.nextImageTask("s1");

        assertNotNull(nextTask);
        ImageTask intendedLastTask = JsonUtil.fromJsonFile("src/test/resources/author/nextImageTaskTest2.json", ImageTask.class);
        assertEquals(intendedLastTask, nextTask);

        nextTask = parServer.nextImageTask("s2");
        assertNotNull(nextTask);
        assertEquals(intendedLastTask, nextTask);

    }

    @Test
    public void imageTaskResponseSubmittedAndCalcScoreTest() throws IOException{

        StudentModelDatastore studentModelDatastore = new JsonStudentModelDatastore("src/test/resources/author/SampleQuestionPool3.json", "src/test/resources/autoGenerated");
        ParServer parServer = new ParServer(studentModelDatastore);
        ImageTaskResponse responseSet2=new ImageTaskResponse("response1", Arrays.asList("PlaneQ1", "PlaneQ2", "PlaneQ3", "PlaneQ4", "PlaneQ5", "StructureQ1", "StructureQ2", "StructureQ3", "StructureQ4", "StructureQ5", "ZoneQ1", "ZoneQ2", "ZoneQ3", "ZoneQ4", "ZoneQ5"),Arrays.asList("Latera", "Transvers", "Latera", "Latera", "Transvers", "bone", "ligament", "tendon", "bone", "tumor", "3c", "1b", "3c", "2a", "2b"));
        ImageTaskResponse responseSet3=new ImageTaskResponse("response1", Arrays.asList("PlaneQ1", "PlaneQ2", "PlaneQ3", "PlaneQ4", "PlaneQ5", "StructureQ1", "StructureQ2", "StructureQ3", "StructureQ4", "StructureQ5", "ZoneQ1", "ZoneQ2", "ZoneQ3", "ZoneQ4", "ZoneQ5"),Arrays.asList("I'm","bad","student","I'm","bad","student","I'm","bad","student","I'm","bad","student","I'm","bad","student"));
        List<ImageTaskResponse> responsesFromFile = JsonUtil.listFromJsonFile("src/test/resources/author/SampleResponses.json", ImageTaskResponse.class);

        //star student
        parServer.imageTaskResponseSubmitted(responsesFromFile.get(0),"s1");//gives responses from response file
        assertEquals(100.0,parServer.calcScore("s1"), DataUtil.OK_DOUBLE_MARGIN);


        //great student
        parServer.imageTaskResponseSubmitted(responseSet2,"s2");//gives responses from responseSet2 that contains some right and wrong answers
        assertEquals(83.3333333,parServer.calcScore("s2"),DataUtil.OK_DOUBLE_MARGIN);
        parServer.imageTaskResponseSubmitted(responsesFromFile.get(0),"s2");//gives responses from file that give all the correct answer (for scores that are 0 gives the user 50)
        assertEquals(83.3333333,parServer.calcScore("s2"), DataUtil.OK_DOUBLE_MARGIN);
        parServer.imageTaskResponseSubmitted(responsesFromFile.get(0),"s2");//gives responses from file that give all the correct answer (for scores that are 0 gives the user 50)
        assertEquals(83.3333333,parServer.calcScore("s2"), DataUtil.OK_DOUBLE_MARGIN);
//score should stay the same even when the correct answers are entered afterwards since they were all answered in a
// time window that didnt exceed 30 seconds

        //terrible student
        parServer.imageTaskResponseSubmitted(responsesFromFile.get(0),"s3");//gives responses from file
        assertEquals(100.0,parServer.calcScore("s3"), DataUtil.OK_DOUBLE_MARGIN);
        parServer.imageTaskResponseSubmitted(responseSet3,"s3");//gives all wrong answers so it give the student half credit for each question
        assertEquals(0,parServer.calcScore("s3"), DataUtil.OK_DOUBLE_MARGIN);



    }

    @AfterEach
    public void cleanUp() throws IOException{
        //deletes files so test doesn't keep writing to the same file multiple times
        Path path1 = Paths.get("src/test/resources/autoGenerated/s1.json");
        Files.deleteIfExists(path1);
        Path path2 = Paths.get("src/test/resources/autoGenerated/s2.json");
        Files.deleteIfExists(path2);
        Path path3 = Paths.get("src/test/resources/autoGenerated/s3.json");
        Files.deleteIfExists(path3);
    }
}
